#pragma once

#include "ns3/filesystem.h"
#include "ns3/rdma-helper.h"
#include <avro/Compiler.hh>
#include <avro/DataFile.hh>
#include <avro/Decoder.hh>
#include <avro/Encoder.hh>
#include <avro/ValidSchema.hh>
#include <string>
#include <sstream>
#include <stdexcept>
#include <memory>

namespace ns3 {

/**
 * Helper to write data to files for later analysis.
 *
 * Uses Avro format.
 * The C++ source/header files of the datatypes are generated by the scripts in the subdirectory `./schemas`.
 * Call `gen-avro-headers.sh` when the `.avsc` files are modified, and commit them to the repository. 
 *
 * The script also generates a C++ utility function `GetAvroSchema()` which is overloaded for each datatype,
 * which permits to automatically get the schema from the C++ type.
 * the argument is unused and is just here for disambigiuate the type.
 */
template<typename T>
class RdmaSerializer
{
public:
  /**
   * Create a writer to an avro output file.
   * Truncate if the file already exist.
   *
   * The corresponding Avro schema is automatically known.
   * The datatype `T` should have been generated with the script in the `./schemas` folder.
   *
   * @param output_path The `.avro` file where to write records.
   */
  RdmaSerializer(const fs::path& output_path)
    : m_schema{LoadSchema()},
      m_writer{std::make_unique<avro::DataFileWriter<T>>(output_path.c_str(), m_schema)}
  {
  }

  RdmaSerializer() = default;

  /**
   * Append an object as a record to the output file.
   * @param record The object to write.
   */
  void write(const T& record)
  {
    m_writer->write(record);
  }

private:
  static avro::ValidSchema LoadSchema()
  {
    const char* const schema_json = GetAvroSchema(static_cast<T*>(nullptr));
    const std::string schema_str{schema_json};
    std::istringstream schema_is(schema_str);
    avro::ValidSchema ret_schema;
    avro::compileJsonSchema(schema_is, ret_schema);
    return ret_schema;
  }

private:
  //! Schema shared between all `T` instances.
  avro::ValidSchema m_schema;
  //! Writer to the output file.
  //! Unique pointer to allow default constructor.
  std::unique_ptr<avro::DataFileWriter<T>> m_writer;
};

} // namespace ns3